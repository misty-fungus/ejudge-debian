<% //-*- c -*-
%><%@include "includes.csp"
%><%

#define COPYSTR(f) snprintf(prob->f, sizeof(prob->f), "%s", (f))
#define MOVEENV(f) sarray_free(prob->f); prob->f = f; f = NULL
#define MOVESTR(f) xfree(prob->f); prob->f = f; f = NULL

%><%@set getter_name = "csp_get_prob_save_standing_form"
%><%@set ac_prefix = "SSERV_CMD_"
%><%@set err_prefix = "SSERV_ERR_"
%><%@page csp_view_prob_save_standing_form(PageInterface *pg, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "stdvars.csp"
%><%
    snprintf(phr->content_type, sizeof(phr->content_type), "application/json; charset=%s", EJUDGE_CHARSET);

    int prob_id = 0;

    unsigned char *stand_name = NULL;
    unsigned char *stand_column = NULL;
    int hidden = -1;
    int stand_hide_time = 0;
    unsigned char *stand_attr = NULL;
    ejintbool_t stand_attr_dflt = 0;
    char **score_view = NULL;
    int stand_ignore_score = -1;
    int stand_last_column = -1;
    char **provide_ok = NULL;

    int i;
    struct section_problem_data *prob = NULL;

    char *msg_s = NULL;
    size_t msg_z = 0;
    FILE *msg_f = open_memstream(&msg_s, &msg_z);

%><s:read var="prob_id" required="yes" /><%
%><s:read var="stand_name" normalize="yes" nonnull="yes" /><%
%><s:read var="stand_column" normalize="yes" nonnull="yes" /><%
%><s:read var="hidden" default="-1" /><%
%><s:read var="stand_hide_time" default="-1" /><%
%><s:read var="stand_attr" normalize="yes" nonnull="yes" /><%
%><s:read var="stand_attr_dflt" default="0" /><%
%><s:read var="score_view" /><%
%><s:read var="stand_ignore_score" default="-1" /><%
%><s:read var="stand_last_column" default="-1" /><%
%><s:read var="provide_ok" /><%

    if (retval || !phr->ss) goto cleanup;

    if (hidden > 0) hidden = 1;
    if (stand_hide_time > 0) stand_hide_time = 1;
    if (stand_attr_dflt) *stand_attr = 0;
    if (stand_ignore_score > 0) stand_ignore_score = 1;
    if (stand_last_column > 0) stand_last_column = 1;

    if (prob_id <= 0) {
        i = -prob_id;
        if (i >= phr->ss->aprob_u) FAIL(SSERV_ERR_INVALID_PARAMETER);
        prob = phr->ss->aprobs[i];
        if (!prob) FAIL(SSERV_ERR_INVALID_PARAMETER);

        if (hidden < 0) hidden = 0;
        if (stand_hide_time < 0) stand_hide_time = 0;
        if (stand_ignore_score < 0) stand_ignore_score = 0;
        if (stand_last_column < 0) stand_last_column = 0;
    } else {
        i = prob_id;
        if (i >= phr->ss->prob_a) FAIL(SSERV_ERR_INVALID_PARAMETER);
        prob = phr->ss->probs[i];
        if (!prob) FAIL(SSERV_ERR_INVALID_PARAMETER);

        if (hidden < 0) hidden = -1;
        if (stand_hide_time < 0) stand_hide_time = -1;
        if (stand_ignore_score < 0) stand_ignore_score = -1;
        if (stand_last_column < 0) stand_last_column = -1;
    }

    if (!retval && phr->ss) {
        COPYSTR(stand_name);
        COPYSTR(stand_column);
        prob->hidden = hidden;
        prob->stand_hide_time = stand_hide_time;
        COPYSTR(stand_attr);
        MOVEENV(score_view);
        prob->stand_ignore_score = stand_ignore_score;
        prob->stand_last_column = stand_last_column;
        MOVEENV(provide_ok);
    }

cleanup:;
    fclose(msg_f); msg_f = NULL;
%>
{
    "input" : {
    },
    "retval" : <s:v value="retval" />,
    "messages" : "<s:v value="msg_s" json="yes" checkExpr="" />"
}
<%
    html_armor_free(&ab);
    xfree(msg_s);
    xfree(stand_name);
    xfree(stand_column);
    xfree(stand_attr);
    sarray_free(score_view);
    sarray_free(provide_ok);
%>
